stages:
  - build
  
Debian:
  tags:
    - docker
    - linux
  image: gcc
  cache:
    key: apt-cache
    paths:
    - apt-cache/
  before_script:
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - apt-get update -yq 
    - apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -y cmake libboost-filesystem-dev libboost-program-options-dev libboost-system-dev libboost-iostreams-dev libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libswresample-dev libsdl2-dev libqt4-dev libopenal-dev libopenscenegraph-3.4-dev libunshield-dev libtinyxml-dev libmygui-dev libbullet-dev
  stage: build
  script: 
    - cores_to_use=$((`nproc`-2)); if (( $cores_to_use < 1 )); then cores_to_use=1; fi
    - mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=MinSizeRel ../
    - make -j$cores_to_use
    - DESTDIR=artifacts make install
  artifacts:
    paths:
      - build/artifacts/

MacOS:
  tags:
    - macos
    - xcode
  except:
    - branches # because our CI VMs are not public, MRs can't use them and timeout
  stage: build
  allow_failure: true
  script:
    - rm -fr build/*  #  remove anything in the build directory
    - CI/before_install.osx.sh
    - CI/before_script.osx.sh
    - cd build; make -j2 package
  artifacts:
    paths:
      - build/OpenMW-*.dmg

Windows:
  tags:
    - windows
  before_script:
  - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
  - choco install git --force --params "/GitAndUnixToolsOnPath" -y
  - choco install 7zip -y
  - choco install cmake.install --installargs 'ADD_CMAKE_TO_PATH=System' -y
  - choco install vswhere -y
  - choco install ninja -y
  - choco install python -y
  - refreshenv
  - vswhere
  stage: build
  script:
    - $time = (Get-Date -Format "HH:mm:ss")
    - echo ${time}
    - echo "started by ${GITLAB_USER_NAME}"
    - sh CI/before_script.msvc.sh -c RelWithDebInfo -p Win64 -v 2019 -k -V -N ; echo ye
    - #cd MSVC2016_64_Ninja
    - #.\ActivateMSVC.ps1
    - #cmake --build . --config RelWithDebInfo
    - #cd RelWithDebInfo
    - #7z a -tzip ..\..\OpenMW_MSVC2019_64_${CIBuildRefName}_${CIBuildID}_symbols.zip '*.pdb'
    - #Get-ChildItem -Recurse *.pdb | Remove-Item
    - #7z a -tzip ..\..\OpenMW_MSVC2019_64_${CIBuildRefName}_${CIBuildID}.zip '*'

  cache:
    paths:
    - deps
    - MSVC2019_64/deps
  artifacts:
    when: always
    paths:
    - "*.zip"
    - "*.log"
    - MSVC2019_64_Ninja/*
    - MSVC2019_64_Ninja/*.log
    - MSVC2019_64_Ninja/*/*.log
    - MSVC2019_64_Ninja/*/*/*.log
    - MSVC2019_64_Ninja/*/*/*/*.log
    - MSVC2019_64_Ninja/*/*/*/*/*.log
    - MSVC2019_64_Ninja/*/*/*/*/*/*.log
    - MSVC2019_64_Ninja/*/*/*/*/*/*/*.log
    - MSVC2019_64_Ninja/*/*/*/*/*/*/*/*.log

